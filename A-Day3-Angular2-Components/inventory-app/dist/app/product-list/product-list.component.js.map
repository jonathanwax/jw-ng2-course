{"version":3,"file":"product-list.component.js","sourceRoot":"","sources":["../../home/ubuntu/workspace/jw-ng2-course/A-Day3-Build-Angular2-Components-App/inventory-app/tmp/broccoli_type_script_compiler-input_base_path-fiMN6irI.tmp/0/src/app/product-list/product-list.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+D,eAAe,CAAC,CAAA;AAE/E,sCAAoC,sCAAsC,CAAC,CAAA;AAE3E;;;GAGG;AAiBH;IAkBE;QACE,IAAI,CAAC,iBAAiB,GAAG,IAAI,mBAAY,EAAE,CAAC;IAC9C,CAAC;IAED,sCAAO,GAAP,UAAQ,OAAgB;QACtB,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,yCAAU,GAAV,UAAW,OAAgB;QACzB,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,GAAG,KAAK,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;IACjD,CAAC;IA5BD;QAAC,YAAK,EAAE;;6DAAA;IAMR;QAAC,aAAM,EAAE;;mEAAA;IA1BX;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;YAC5B,UAAU,EAAE,CAAC,2CAAmB,CAAC;YACjC,0BAA0B;YAC1B,iCAAiC;YACjC,QAAQ,EAAE,kQAST;SACF,CAAC;;4BAAA;IAmCF,2BAAC;AAAD,CAAC,AAlCD,IAkCC;AAlCY,4BAAoB,uBAkChC,CAAA","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Product } from '../shared/product.model';\nimport { ProductRowComponent } from '../product-row/product-row.component';\n\n/**\n * @ProductsList: A component for rendering all ProductRows and \n * storing the currently selected Product\n */\n@Component({\n  selector: 'app-product-list',\n  directives: [ProductRowComponent],\n  //inputs: ['productList'],\n  //outputs: ['onProductSelected'],\n  template: `\n  <div class=\"ui items\">\n    <app-product-row \n      *ngFor=\"let myProduct of productList\" \n      [product]=\"myProduct\" \n      (click)='clicked(myProduct)'\n      [class.selected]=\"isSelected(myProduct)\">\n    </app-product-row>\n  </div>\n  `\n})\nexport class ProductListComponent {\n  /**\n   * @input productList - the Product[] passed to us\n   */\n  @Input() productList: Product[];\n\n  /**\n   * @ouput onProductSelected - outputs the current \n   *          Product whenever a new Product is selected\n   */\n  @Output() onProductSelected: EventEmitter<Product>;\n\n  /**\n   * @property currentProduct - local state containing \n   *             the currently selected `Product`\n   */\n  currentProduct: Product;\n\n  constructor() {\n    this.onProductSelected = new EventEmitter();\n  }\n\n  clicked(product: Product): void {\n    this.currentProduct = product;\n    this.onProductSelected.emit(product);\n  }\n\n  isSelected(product: Product): boolean {\n    if (!product || !this.currentProduct) {\n      return false;\n    }\n    return product.sku === this.currentProduct.sku;\n  }\n\n}\n"]}